full_join(score_round1,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
if (round_no==3){
score_round1<-read_csv(paste0(output_location,"Round ","1","/results by team.csv"))
score_round2<-read_csv(paste0(output_location,"Round ","2","/results by team.csv"))
scores_cumulative<-score_by_team%>%
rename(round3_score=score)%>%
full_join(score_round1,by=c("team_name"))%>%
rename(round1_score=score)%>%
full_join(score_round2,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score),
round3_score=ifelse(is.na(round3_score),0,round3_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score+round3_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,round3_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
if (city=="DC"){
max_dist<-73000
}
if (city=="NYC"){
max_dist<-130000
}
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=round(5000 * exp(-10 * distance / max_dist),0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
score_by_team<-score_by_location%>%
group_by(team_name)%>%
summarise(score=sum(score,na.rm=T))
write_csv(score_by_location, paste0(output_location,"Round ",round_no,"/results by location.csv"))
write_csv(score_by_team, paste0(output_location,"Round ",round_no,"/results by team.csv"))
if (round_no==1){
scores_cumulative<-score_by_team%>%
group_by(team_name)%>%
summarise(round1_score=sum(score,na.rm=T),
cumulative_score=sum(score,na.rm=T)
)%>%
arrange(desc(cumulative_score))
}
if (round_no==2){
score_round1<-read_csv(paste0(output_location,"Round ","1","/results by team.csv"))%>%
rename(round1_score=score)
scores_cumulative<-score_by_team%>%
full_join(score_round1,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
if (round_no==3){
score_round1<-read_csv(paste0(output_location,"Round ","1","/results by team.csv"))
score_round2<-read_csv(paste0(output_location,"Round ","2","/results by team.csv"))
scores_cumulative<-score_by_team%>%
rename(round3_score=score)%>%
full_join(score_round1,by=c("team_name"))%>%
rename(round1_score=score)%>%
full_join(score_round2,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score),
round3_score=ifelse(is.na(round3_score),0,round3_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score+round3_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,round3_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
library(tibble)
library(dplyr)
library(readr)
library(sf)
library(httr)
library(jsonlite)
library(purrr)
library(tidyverse)
library(janitor)
library(googlesheets4)
library(stringr)
library(geosphere)
library(leaflet)
library(magick)
library(metro)
library(gtfstools)
city <- "DC"        #DC or NYC
round_no <- 3
google_sheet_link<-"https://docs.google.com/spreadsheets/d/188wl-XhzJ0fz0TCU9zHMOKmARJes0_Is-VX1b9NZgAs/edit?usp=sharing"
pano<-"off" #on or off to save panorama pictures of locations
auto_run<-"yes"
at_large_percent<-.5
downtown_percent<-.15
greater_central_percent<-.25
metro_percent<-.1
metro_distance<-150 #distance from metro stations, in feet
manhattan_percent<-.43
brooklyn_percent<-.32
queens_percent<-.12
bronx_percent<-.03
subway_percent<-.10
subway_distance<-100 #distance from subway stations, in feet
code_base<-paste0("C:/Users/jwest/github/geoguessr_cities/")
output_location<-paste0("C:/Users/jwest/github/geoguessr_cities/",city,"/output/")
if (auto_run=="yes"){
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
source(paste0(code_base,"04_images.R"))
}
if (city=="DC"){
max_dist<-73000
}
if (city=="NYC"){
max_dist<-130000
}
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=round(5000 * exp(-10 * distance / max_dist),0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
score_by_team<-score_by_location%>%
group_by(team_name)%>%
summarise(score=sum(score,na.rm=T))
write_csv(score_by_location, paste0(output_location,"Round ",round_no,"/results by location.csv"))
write_csv(score_by_team, paste0(output_location,"Round ",round_no,"/results by team.csv"))
if (round_no==1){
scores_cumulative<-score_by_team%>%
group_by(team_name)%>%
summarise(round1_score=sum(score,na.rm=T),
cumulative_score=sum(score,na.rm=T)
)%>%
arrange(desc(cumulative_score))
}
if (round_no==2){
score_round1<-read_csv(paste0(output_location,"Round ","1","/results by team.csv"))%>%
rename(round1_score=score)
scores_cumulative<-score_by_team%>%
full_join(score_round1,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
if (round_no==3){
score_round1<-read_csv(paste0(output_location,"Round ","1","/results by team.csv"))
score_round2<-read_csv(paste0(output_location,"Round ","2","/results by team.csv"))
scores_cumulative<-score_by_team%>%
rename(round3_score=score)%>%
full_join(score_round1,by=c("team_name"))%>%
rename(round1_score=score)%>%
full_join(score_round2,by=c("team_name"))%>%
rename(round2_score=score)%>%
mutate(round1_score=ifelse(is.na(round1_score),0,round1_score),
round2_score=ifelse(is.na(round2_score),0,round2_score),
round3_score=ifelse(is.na(round3_score),0,round3_score)
)%>%
group_by(team_name)%>%
mutate(cumulative_score=sum(round1_score+round2_score+round3_score,na.rm=T))%>%
select(team_name,round1_score,round2_score,round3_score,cumulative_score)%>%
arrange(desc(cumulative_score))
}
score_by_location<-read_csv(paste0(output_location,"Round ",round_no,"/results by location.csv"))
seqnum_list <- unique(score_by_location$seqnum)
for (i in 1:length(seqnum_list)){
filtered_data <- score_by_location %>% filter(seqnum == seqnum_list[i])
# Create a leaflet map
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
# Add lines connecting each guess to its corresponding actual coordinate
for (i in 1:nrow(filtered_data)) {
map <- map %>%
addPolylines(
lng = c(filtered_data$longitude[i], filtered_data$longitude_guess[i]),
lat = c(filtered_data$latitude[i], filtered_data$latitude_guess[i]),
color = "black", opacity = 1, weight=1
)
}
# Add points for actual coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude, lat = ~latitude,
color = "yellow", stroke = TRUE, weight = 4,
fillColor = "black", fillOpacity = 1, radius = 5,
popup = ~paste("Actual location ", max(filtered_data$seqnum))
)
# Add points for guessed coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude_guess, lat = ~latitude_guess,
color = "black", stroke = TRUE, weight = 2,
fillColor = "red", fillOpacity = 1, radius = 5,
popup = ~paste(team_name,
"<br>","Distance: ",distance_label,
"<br>","Score: ",score)
)
if (city=="DC"){
map<-map%>%
setView(lng = -77.0369, lat = 38.9072, zoom = 11)
}
if (city=="NYC"){
map<-map%>%
setView(lng = -73.9663, lat = 40.7076, zoom = 10)
}
# Render the map
print(max(filtered_data$seqnum))
print(map)
# Save the map as an HTML file
saveWidget(map, file = paste0(output_location, "round_", round_no, "_location_",  max(filtered_data$seqnum), ".html"), selfcontained = TRUE)
}
View(scores_cumulative)
library(tibble)
library(dplyr)
library(readr)
library(sf)
library(httr)
library(jsonlite)
library(purrr)
library(tidyverse)
library(janitor)
library(googlesheets4)
library(stringr)
library(geosphere)
library(leaflet)
library(magick)
library(metro)
library(gtfstools)
city <- "DC"        #DC or NYC
round_no <- 1
google_sheet_link<-"https://docs.google.com/spreadsheets/d/188wl-XhzJ0fz0TCU9zHMOKmARJes0_Is-VX1b9NZgAs/edit?usp=sharing"
pano<-"off" #on or off to save panorama pictures of locations
auto_run<-"yes"
at_large_percent<-.5
downtown_percent<-.15
greater_central_percent<-.25
metro_percent<-.1
metro_distance<-150 #distance from metro stations, in feet
manhattan_percent<-.43
brooklyn_percent<-.32
queens_percent<-.12
bronx_percent<-.03
subway_percent<-.10
subway_distance<-100 #distance from subway stations, in feet
code_base<-paste0("C:/Users/jwest/github/geoguessr_cities/")
output_location<-paste0("C:/Users/jwest/github/geoguessr_cities/",city,"/output/")
if (city=="DC"){
max_dist<-73000
}
if (city=="NYC"){
max_dist<-130000
}
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
View(locations)
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)
View(locations)
View(score_by_location)
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist),0)%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=round(score,1))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=round(score,0))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
if (city=="DC"){
max_dist<-73000
}
if (city=="NYC"){
max_dist<-130000
}
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=ifelse(score>5000,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
source(paste0(code_base,"01_borders.R"))
source(paste0(code_base,"02_locations.R"))
source(paste0(code_base,"03_metadata.R"))
answers<-read_csv(paste0(output_location,"Round ",round_no,"/locations.csv"))
guesses <- read_sheet(google_sheet_link)%>%
filter(round==round_no)%>%
group_by(team_name,location)%>%
filter(datetime==max(datetime))%>%
ungroup()
score_by_location<-answers%>%
right_join(guesses,by=c("seqnum"="location"))%>%
mutate(distance = distHaversine(cbind(longitude, latitude), cbind(longitude_guess, latitude_guess)) * 3.28084)%>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=ifelse(score>5000,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(distance_label=ifelse(
distance<5280,paste0(round(distance,0)," ft"),
paste0(round(distance/5280,1)," mi")))
library(dplyr)
library(ggplot2)
city<-"DC"
if(city=="DC"){
max_dist=73000
}
if(city=="NYC"){
max_dist=130000
}
df <- data.frame(distance = 0:max_dist) %>%
#  mutate(score = round(5000 * exp(-10 * distance / max_dist), 0)) %>%
mutate(score=5000 * exp(-10 * distance / max_dist))%>%
mutate(score=ifelse(distance<5280,score*1.02,score))%>%
mutate(score=ifelse(distance<160,5000,score))%>%
mutate(score=ifelse(score>5000,5000,score))%>%
mutate(score=round(score,0))%>%
mutate(highlights = ifelse(
score %in% c(100, 500, 1000, 2000, 3000, 4000, 5000),
score,
NA
)) %>%
group_by(highlights) %>%
mutate(max_distance = max(distance)) %>%
ungroup() %>%
mutate(max_distance = ifelse(is.na(highlights), NA, max_distance)) %>%
mutate(highlights = ifelse(max_distance == distance, highlights, NA)) %>%
select(-max_distance)%>%
mutate(dist_miles=distance/5280)
ggplot(df, aes(x = dist_miles)) +
geom_line(aes(y = score), color = "#5F9EA0", size = 1) +
geom_point(aes(y = highlights), color = "#5F9EA0", shape = 18, size = 4) +
geom_segment(aes(
x = dist_miles, xend = 0,
y = highlights, yend = highlights
), linetype = "dotted", color = "black", size = 1) +
geom_text(
aes(
x = dist_miles,
y = highlights,
label = ifelse(!is.na(highlights), sprintf("%.1f miles", round(dist_miles, 1)), NA)
),
hjust = -0.3,
vjust = -0.2,
color = "black",
size = 4
) +
{
if (city == "NYC") {
scale_x_continuous(
limits = c(0, 25),
breaks = seq(0, 25, by = 5),
labels = scales::comma
)
} else if (city == "DC") {
scale_x_continuous(
limits = c(0, 15),
breaks = seq(0, 15, by = 5),
labels = scales::comma
)
}
} +
scale_y_continuous(
limits = c(0, 5000),
breaks = c(100, 500, 1000, 2000, 3000, 4000, 5000),
labels = scales::comma
) +
labs(
title = "Score by Distance",
x = "Distance (miles)",
y = "Score"
) +
theme_classic() +
theme(
plot.title = element_text(color = "black", hjust = 0.5, face = "bold"),
axis.title.x = element_text(color = "black", size=14),
axis.title.y = element_text(color = "black", size=14),
axis.text.x = element_text(color = "black", size=12),
axis.text.y = element_text(color = "black", size=12),
axis.line.y = element_line()
)
View(df)
