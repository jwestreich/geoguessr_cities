)
# Add points for guessed coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude_guess, lat = ~latitude_guess,
color = "black", stroke = TRUE, weight = 2,
fillColor = "red", fillOpacity = 1, radius = 5,
popup = ~paste(team_name,"\nScore: ",score)
)
if (city=="DC"){
map<-map%>%
setView(lng = -77.0369, lat = 38.9072, zoom = 11)
}
if (city=="NYC"){
map<-map%>%
setView(lng = -73.9663, lat = 40.7076, zoom = 10)
}
# Render the map
print(max(filtered_data$seqnum))
print(map)
}
# Create a leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
map
score_by_location<-read_csv(paste0(output_location,"Round ",round_no,"/results by location.csv"))
seqnum_list <- unique(score_by_location$seqnum)
for (i in 1:length(seqnum_list)){
filtered_data <- score_by_location %>% filter(seqnum == seqnum_list[i])
# Create a leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
# Add lines connecting each guess to its corresponding actual coordinate
for (i in 1:nrow(filtered_data)) {
map <- map %>%
addPolylines(
lng = c(filtered_data$longitude[i], filtered_data$longitude_guess[i]),
lat = c(filtered_data$latitude[i], filtered_data$latitude_guess[i]),
color = "black", opacity = 1, weight=1
)
}
# Add points for actual coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude, lat = ~latitude,
color = "yellow", stroke = TRUE, weight = 4,
fillColor = "black", fillOpacity = 1, radius = 5,
popup = ~paste("Actual location ", max(filtered_data$seqnum))
)
# Add points for guessed coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude_guess, lat = ~latitude_guess,
color = "black", stroke = TRUE, weight = 2,
fillColor = "red", fillOpacity = 1, radius = 5,
popup = ~paste(team_name,"\nScore: ",score)
)
if (city=="DC"){
map<-map%>%
setView(lng = -77.0369, lat = 38.9072, zoom = 11)
}
if (city=="NYC"){
map<-map%>%
setView(lng = -73.9663, lat = 40.7076, zoom = 10)
}
# Render the map
print(max(filtered_data$seqnum))
print(map)
}
score_by_location<-read_csv(paste0(output_location,"Round ",round_no,"/results by location.csv"))
seqnum_list <- unique(score_by_location$seqnum)
for (i in 1:length(seqnum_list)){
filtered_data <- score_by_location %>% filter(seqnum == seqnum_list[i])
# Create a leaflet map
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
# Add lines connecting each guess to its corresponding actual coordinate
for (i in 1:nrow(filtered_data)) {
map <- map %>%
addPolylines(
lng = c(filtered_data$longitude[i], filtered_data$longitude_guess[i]),
lat = c(filtered_data$latitude[i], filtered_data$latitude_guess[i]),
color = "black", opacity = 1, weight=1
)
}
# Add points for actual coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude, lat = ~latitude,
color = "yellow", stroke = TRUE, weight = 4,
fillColor = "black", fillOpacity = 1, radius = 5,
popup = ~paste("Actual location ", max(filtered_data$seqnum))
)
# Add points for guessed coordinates
map <- map %>%
addCircleMarkers(
data = filtered_data,
lng = ~longitude_guess, lat = ~latitude_guess,
color = "black", stroke = TRUE, weight = 2,
fillColor = "red", fillOpacity = 1, radius = 5,
popup = ~paste(team_name,"\nScore: ",score)
)
if (city=="DC"){
map<-map%>%
setView(lng = -77.0369, lat = 38.9072, zoom = 11)
}
if (city=="NYC"){
map<-map%>%
setView(lng = -73.9663, lat = 40.7076, zoom = 10)
}
# Render the map
print(max(filtered_data$seqnum))
print(map)
}
library(httr)
library(jsonlite)
# Function to get metadata for a location
get_streetview_metadata <- function(lat, lon, api_key) {
metadata_url <- "https://maps.googleapis.com/maps/api/streetview/metadata"
response <- GET(metadata_url, query = list(
location = paste(lat, lon, sep = ","),
key = api_key
))
content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
}
# Function to get the actual Street View image URL
get_streetview_image <- function(pano_id, api_key, size = "600x400") {
image_url <- "https://maps.googleapis.com/maps/api/streetview"
paste0(image_url, "?pano=", pano_id, "&size=", size, "&key=", api_key)
}
# Replace with your Google API Key
api_key <- "GOOGLE_MAPS_API_KEY"
# Example coordinates
latitude <- 38.889248
longitude <- -77.050636
# Get metadata
metadata <- get_streetview_metadata(latitude, longitude, api_key)
# Check if the request was successful
if (metadata$status == "OK") {
# Extract exact coordinates and panorama ID
exact_lat <- metadata$location$lat
exact_lon <- metadata$location$lng
pano_id <- metadata$pano_id
# Get the image URL
image_url <- get_streetview_image(pano_id, api_key)
# Print results
cat("Exact Latitude:", exact_lat, "\n")
cat("Exact Longitude:", exact_lon, "\n")
cat("Panorama ID:", pano_id, "\n")
cat("Image URL:", image_url, "\n")
} else {
cat("Error:", metadata$status, "\n")
}
library(httr)
library(jsonlite)
# Function to get metadata for a location
get_streetview_metadata <- function(lat, lon, api_key) {
metadata_url <- "https://maps.googleapis.com/maps/api/streetview/metadata"
response <- GET(metadata_url, query = list(
location = paste(lat, lon, sep = ","),
key = api_key
))
content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
}
# Function to get the actual Street View image URL
get_streetview_image <- function(pano_id, api_key, size = "600x400") {
image_url <- "https://maps.googleapis.com/maps/api/streetview"
paste0(image_url, "?pano=", pano_id, "&size=", size, "&key=", api_key)
}
# Replace with your Google API Key
api_key <- "GOOGLE_MAPS_API_KEY"
# Example coordinates
latitude <- 38.889248
longitude <- -77.050636
# Get metadata
metadata <- get_streetview_metadata(latitude, longitude, api_key)
# Check if the request was successful
if (metadata$status == "OK") {
# Extract exact coordinates and panorama ID
exact_lat <- metadata$location$lat
exact_lon <- metadata$location$lng
pano_id <- metadata$pano_id
# Get the image URL
image_url <- get_streetview_image(pano_id, api_key)
# Print results
cat("Exact Latitude:", exact_lat, "\n")
cat("Exact Longitude:", exact_lon, "\n")
cat("Panorama ID:", pano_id, "\n")
cat("Image URL:", image_url, "\n")
} else {
cat("Error:", metadata$status, "\n")
}
library(httr)
library(jsonlite)
# Function to get metadata for a location
get_streetview_metadata <- function(lat, lon, api_key) {
metadata_url <- "https://maps.googleapis.com/maps/api/streetview/metadata"
response <- GET(metadata_url, query = list(
location = paste(lat, lon, sep = ","),
key = api_key
))
content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
}
# Function to get the actual Street View image URL
get_streetview_image <- function(pano_id, api_key, size = "600x400") {
image_url <- "https://maps.googleapis.com/maps/api/streetview"
paste0(image_url, "?pano=", pano_id, "&size=", size, "&key=", api_key)
}
# Replace with your Google API Key
api_key <- "GOOGLE_MAPS_API_KEY"
# Example coordinates
latitude <- 38.882248
longitude <- -77.050636
# Get metadata
metadata <- get_streetview_metadata(latitude, longitude, api_key)
# Check if the request was successful
if (metadata$status == "OK") {
# Extract exact coordinates and panorama ID
exact_lat <- metadata$location$lat
exact_lon <- metadata$location$lng
pano_id <- metadata$pano_id
# Get the image URL
image_url <- get_streetview_image(pano_id, api_key)
# Print results
cat("Exact Latitude:", exact_lat, "\n")
cat("Exact Longitude:", exact_lon, "\n")
cat("Panorama ID:", pano_id, "\n")
cat("Image URL:", image_url, "\n")
} else {
cat("Error:", metadata$status, "\n")
}
# Test the key with a simple request
test_url <- paste0("https://maps.googleapis.com/maps/api/streetview/metadata?location=38.889248,-77.050636&key=", api_key)
response <- httr::GET(test_url)
content(response, "text", encoding = "UTF-8") %>% jsonlite::fromJSON(flatten = TRUE)
library(httr)
library(jsonlite)
# Function to get metadata for a location
get_streetview_metadata <- function(lat, lon, api_key) {
metadata_url <- "https://maps.googleapis.com/maps/api/streetview/metadata"
response <- GET(metadata_url, query = list(
location = paste(lat, lon, sep = ","),
key = api_key
))
content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
}
# Function to get the actual Street View image URL
get_streetview_image <- function(pano_id, api_key, size = "600x400") {
image_url <- "https://maps.googleapis.com/maps/api/streetview"
paste0(image_url, "?pano=", pano_id, "&size=", size, "&key=", api_key)
}
# Replace with your Google API Key
api_key <- Sys.getenv("GOOGLE_MAPS_API_KEY")
# Example coordinates
latitude <- 38.882248
longitude <- -77.050636
# Get metadata
metadata <- get_streetview_metadata(latitude, longitude, api_key)
# Check if the request was successful
if (metadata$status == "OK") {
# Extract exact coordinates and panorama ID
exact_lat <- metadata$location$lat
exact_lon <- metadata$location$lng
pano_id <- metadata$pano_id
# Get the image URL
image_url <- get_streetview_image(pano_id, api_key)
# Print results
cat("Exact Latitude:", exact_lat, "\n")
cat("Exact Longitude:", exact_lon, "\n")
cat("Panorama ID:", pano_id, "\n")
cat("Image URL:", image_url, "\n")
} else {
cat("Error:", metadata$status, "\n")
}
library(httr)
library(jsonlite)
# Function to get metadata for a location
get_streetview_metadata <- function(lat, lon, api_key) {
metadata_url <- "https://maps.googleapis.com/maps/api/streetview/metadata"
response <- GET(metadata_url, query = list(
location = paste(lat, lon, sep = ","),
key = api_key
))
content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
}
# Function to get the actual Street View image URL
get_streetview_image <- function(pano_id, api_key, size = "600x400") {
image_url <- "https://maps.googleapis.com/maps/api/streetview"
paste0(image_url, "?pano=", pano_id, "&size=", size, "&key=", api_key)
}
# Replace with your Google API Key
api_key <- Sys.getenv("GOOGLE_MAPS_API_KEY")
# Example coordinates
latitude <- 38.889248
longitude <- -77.050636
# Get metadata
metadata <- get_streetview_metadata(latitude, longitude, api_key)
# Check if the request was successful
if (metadata$status == "OK") {
# Extract exact coordinates and panorama ID
exact_lat <- metadata$location$lat
exact_lon <- metadata$location$lng
pano_id <- metadata$pano_id
# Get the image URL
image_url <- get_streetview_image(pano_id, api_key)
# Print results
cat("Exact Latitude:", exact_lat, "\n")
cat("Exact Longitude:", exact_lon, "\n")
cat("Panorama ID:", pano_id, "\n")
cat("Image URL:", image_url, "\n")
} else {
cat("Error:", metadata$status, "\n")
}
coords <- str_split(location, ",")[[1]]
locations <- locations_draft %>%
rowwise() %>%
mutate(valid = {
coords <- str_split(location, ",")[[1]]
lat <- coords[1]
lng <- coords[2]
res <- fromJSON(GET(
paste0(
"https://maps.googleapis.com/maps/api/streetview/metadata?location=",
location, "&key=", Sys.getenv("GOOGLE_MAPS_API_KEY")
)
) %>% content("text"))
res$status == "OK"
}) %>%
ungroup()%>%
filter(valid==TRUE)%>%
mutate(seqnum=row_number())%>%
filter(seqnum<=5)
View(locations)
locations <- locations_draft %>%
rowwise() %>%
mutate(
valid = {
coords <- str_split(location, ",")[[1]]
lat <- coords[1]
lng <- coords[2]
res <- fromJSON(GET(
paste0(
"https://maps.googleapis.com/maps/api/streetview/metadata?location=",
location, "&key=", Sys.getenv("GOOGLE_MAPS_API_KEY")
)
) %>% content("text"))
res$status == "OK"
},
exact_lat = {
if (valid) {
coords <- str_split(location, ",")[[1]]
res <- fromJSON(GET(
paste0(
"https://maps.googleapis.com/maps/api/streetview/metadata?location=",
location, "&key=", Sys.getenv("GOOGLE_MAPS_API_KEY")
)
) %>% content("text"))
res$location$lat
} else {
NA
}
},
exact_lng = {
if (valid) {
coords <- str_split(location, ",")[[1]]
res <- fromJSON(GET(
paste0(
"https://maps.googleapis.com/maps/api/streetview/metadata?location=",
location, "&key=", Sys.getenv("GOOGLE_MAPS_API_KEY")
)
) %>% content("text"))
res$location$lng
} else {
NA
}
}
) %>%
ungroup() %>%
filter(valid == TRUE)%>%
mutate(seqnum=row_number())%>%
filter(seqnum<=5)
if (nrow(locations) < 5) {
stop("Less than 5 valid locations found")
}
write_csv(locations, paste0(output_location,"Round ",round_no,"/locations.csv"))
View(metadata)
View(locations)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(flextable))
socpoc <- dataverse::get_dataframe_by_name(
filename = "socpocAPSR.csv",
.f=read_csv,
dataset = "10.7910/DVN/CRPAA8&version=1.0",
server = "dataverse.harvard.edu")|>
select(-1)
effect_linear <- mean(predict_linear_own - predict_linear_noown)
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(flextable))
socpoc <- dataverse::get_dataframe_by_name(
filename = "socpocAPSR.csv",
.f=read_csv,
dataset = "10.7910/DVN/CRPAA8&version=1.0",
server = "dataverse.harvard.edu")|>
select(-1)
linear_model <- lm(supply_dummy ~ own, data = socpoc)
as_flextable(linear_model)
logit_model <- glm(supply_dummy ~ own, family = binomial(link = "logit"), data = socpoc)
as_flextable(logit_model)
linear_model2 <- lm(supply_dummy ~ own + ideology + whitenh + income, data = socpoc)
as_flextable(linear_model2)
logit_model2 <- glm(supply_dummy ~ own + ideology + whitenh + income, family = binomial(link = "logit"), data = socpoc)
as_flextable(logit_model2)
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown)
effect_linear
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
effect_linear
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
effect_linear
predict_logit_own <- predict(logit_model2, newdata = counterfact_own)
predict_logit_noown <- predict(logit_model2, newdata = counterfact_noown)
effect_logit <- mean(predict_logit_own - predict_logit_noown,na.rm=T)
effect_logit
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
print(paste0("Effect from linear model: ",effect_linear))
predict_logit_own <- predict(logit_model2, newdata = counterfact_own)
predict_logit_noown <- predict(logit_model2, newdata = counterfact_noown)
effect_logit <- mean(predict_logit_own - predict_logit_noown,na.rm=T)
print(paste0("Effect from linear model: ",effect_logit))
print(paste0("Effect from linear model: ",round(100*effect_linear,2)))
print(paste0("Effect from linear model: ",round(100*effect_linear,2),"%"))
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
print(paste0("Effect from linear model: ",round(100*effect_linear,2)))
predict_logit_own <- predict(logit_model2, newdata = counterfact_own)
predict_logit_noown <- predict(logit_model2, newdata = counterfact_noown)
effect_logit <- mean(predict_logit_own - predict_logit_noown,na.rm=T)
print(paste0("Effect from logit model: ",round(100*effect_logit,2),"%"))
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
print(paste0("Effect from linear model: ",round(100*effect_linear,2)))
predict_logit_own <- predict(logit_model2, newdata = counterfact_own)
predict_logit_noown <- predict(logit_model2, newdata = counterfact_noown)
effect_logit <- mean(predict_logit_own - predict_logit_noown,na.rm=T)
print(paste0("Effect from logit model: ",round(100*effect_logit,2),"%"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(flextable))
socpoc <- dataverse::get_dataframe_by_name(
filename = "socpocAPSR.csv",
.f=read_csv,
dataset = "10.7910/DVN/CRPAA8&version=1.0",
server = "dataverse.harvard.edu")|>
select(-1)
linear_model <- lm(supply_dummy ~ own, data = socpoc)
as_flextable(linear_model)
logit_model <- glm(supply_dummy ~ own, family = binomial(link = "logit"), data = socpoc)
as_flextable(logit_model)
linear_model2 <- lm(supply_dummy ~ own + ideology + whitenh + income, data = socpoc)
as_flextable(linear_model2)
logit_model2 <- glm(supply_dummy ~ own + ideology + whitenh + income, family = binomial(link = "logit"), data = socpoc)
as_flextable(logit_model2)
counterfact_own<-socpoc%>%
mutate(own=1)
counterfact_noown<-socpoc%>%
mutate(own=0)
predict_linear_own <- predict(linear_model2, newdata = counterfact_own)
predict_linear_noown <- predict(linear_model2, newdata = counterfact_noown)
effect_linear <- mean(predict_linear_own - predict_linear_noown,na.rm=T)
print(paste0("Effect from linear model: ",round(100*effect_linear,2)))
predict_logit_own <- predict(logit_model2, newdata = counterfact_own)
predict_logit_noown <- predict(logit_model2, newdata = counterfact_noown)
effect_logit <- mean(predict_logit_own - predict_logit_noown,na.rm=T)
print(paste0("Effect from logit model: ",round(100*effect_logit,2),"%"))
